The remaining things to implement for translation into the intermediate tree are:

Strings:
    Need to be implemented as arrays of characters. The part that's different is
    that first the AST should be scanned for strings, then all strings should be
    statically created and all references to strings replaces with the TEMP thus
    created.
Deallocating memory
    As a block executes, it uses up bits of the stack. Need to keep track of how
    much is used that way so that at the end of a block the stack can be rewound
    the appropriate amount. Probably by keeping a global var that is incremented
    by the right amount with every alloc and is used to dealloc the right amount.
    The var would be saved and restored with the beginning and end of a block.
Having some mechanism to crash the program with a message for array out of bounds
errors:
    Should probably just add an expr for just that purpose. The interpreter would
    be able to shutdown when seeing it, and the compiler would be able to call
    printf and exit.

The remaining things to implement for the Interpretor are:
    
Implementing functions: There is a pointer on the stack which is set every time
a function is entered and the values are placed there. In addition, the code jumps back
to the ret_location which will be stored when a function is called. We can keep track of 
where we are in the code and continue from there.

Implementing the parts from above: The explanations above are pretty good representations
of the plan for how they would interact with the interpretor.

Writing Testsuite: I've tested the code by hand using test_prog.spl,test_prog2.spl 
and test_prog3.spl. This checks arrays and loops are working. I should write test code
that catches the output from the interpretor and checks what it outputs against
a known value. However, I need to finish this writeup so that I can pack. :/
